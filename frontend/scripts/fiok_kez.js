/*const  { use } = require("react"); */

async function loadUserProps() {
    try {
        const res = await fetch("/frontend/scripts/test_jsons/user.json"); // Node.js backend endpoint
        const user = await res.json();

        const form = document.getElementById("userForm");
        const usernameInput = document.getElementById("fname");
        const emailInput = document.getElementById("email");
        const phoneInput = document.getElementById("phone");
        usernameInput.placeholder = user[0].name;
        emailInput.placeholder = user[0].email;
        phoneInput.placeholder = user[0].phone;

    } catch (err) {
        console.error("Hiba a bet√∂lt√©sn√©l:", err);
    }
}
/* 
document.getElementById("profileDataForm").addEventListener("submit", function(e) {
    */
window.addEventListener("DOMContentLoaded", () => {
// üîπ V√°ltoz√≥k a form elemeihez
const form = document.getElementById("userForm") || document.getElementById("form"); // signup vagy login form
const username = document.getElementById("fname");         // csak signup
const phone = document.getElementById("phone");
const email = document.getElementById("email");                 // mindkett≈ë
const currentPassword = document.getElementById("current-password");           // mindkett≈ë
const newPassword = document.getElementById("new-password"); // csak signup
const errorMessage = document.getElementById("error-message");

// üîπ Hibakeres≈ë f√ºggv√©nyek
function getUserFormErrors(usernameVal, phoneVal, emailVal, currentPasswordVal, newPasswordVal){
    let errors = [];
    /* kib≈ëv√≠teni a jelenlegi adatok ellen≈ërz√©s√©vel */
    /* if(!usernameVal) { errors.push("Sz√ºks√©ges a keresztn√©v megad√°sa!"); firstname.parentElement.classList.add("incorrect"); }
    if(!phoneVal)     { errors.push("Sz√ºks√©ges a telefonsz√°m megad√°sa!"); phone.parentElement.classList.add("incorrect"); }
    if(!emailVal)     { errors.push("Sz√ºks√©ges az email-c√≠m megad√°sa!"); email.parentElement.classList.add("incorrect"); } */
    if(!usernameVal && !phoneVal && !emailVal && !currentPasswordVal && !newPasswordVal) { errors.push("Nem adott meg √∫j adatot!");  }
    if(!currentPasswordVal && newPasswordVal)  { errors.push("Sz√ºks√©ges a jelenlegi jelsz√≥ megad√°sa!"); currentPassword.parentElement.classList.add("incorrect"); }
    if(currentPasswordVal && newPasswordVal.length < 8) { errors.push("A jelsz√≥nak legal√°bb 8 karakter hossz√∫nak kell lennie!"); newPassword.parentElement.classList.add("incorrect"); }
    if(currentPasswordVal && !newPasswordVal)  { errors.push("Csak a jelenlegi jelsz√≥t adtad meg!"); newPassword.parentElement.classList.add("incorrect"); }

    return errors;
}
// üîπ Submit listener
if(form){
    form.addEventListener('submit', async (e) => {
        let errors = [];

        getUserFormErrors(username?.value, phone?.value, email?.value, currentPassword?.value, newPassword?.value).forEach(err => errors.push(err));

        if(errors.length > 0){
            e.preventDefault();
            errorMessage.innerText = errors.join(" ");
            return;
        } 

        e.preventDefault();

        const formData = {
        user: username?.value,
        email: email?.value,
        phone: phone?.value,
        currentPassword: currentPassword?.value, 
        newPassword: newPassword?.value,
        };

        try {
        const res = await fetch("/api/newUserData", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(formData),
        });

        const data = await res.json();
        if (res.ok) {
            alert("‚úÖ Sikeres probl√©mafelv√©tel!");
            document.getElementById("problemForm").reset();
        } else {
            alert("‚ùå Hiba: " + data.message);
        }
        } catch (err) {
        console.error(err);
        alert("‚ö†Ô∏è H√°l√≥zati hiba!");
        }
        
    });
}

// üîπ Inputok figyel√©se hibajelz√©s elt√°vol√≠t√°s√°ra
const allInputs = [username, phone, email, currentPassword, newPassword].filter(input => input != null);
allInputs.forEach(input => {
    input.addEventListener("input", () => {
        if(input.parentElement.classList.contains("incorrect")){
            input.parentElement.classList.remove("incorrect");
            errorMessage.innerText = "";
        }
    });
})
}); 

// bet√∂lt√©s oldal indul√°skor
loadUserProps();